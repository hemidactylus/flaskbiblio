TODO

* nice-looking pages

* searches, pagination and so on
    the 'show all' endpoint becomes a generic 'respond to query' endpoint
    with some query-request-arguments + a 'startfrom' index.
    The query arguments are passed to a querying engine, along with
    the startfrom, which interprets it, trims the results, returns the polished list.
        QUERY ARGS FOR BOOKS:
*            author=123      author contains an author ID
*            title=abcd      title contains a (case-ins) string
*            booktype=DIZ    type = a type tag
*           language=DE     languages contains a language tag
            inhouse=0/1     book is in house or not
MUST STILL HANDLE MULTIDICT and multiple same-type filters! (AND)

* when inserting a new author or book warn if the vectorisation detects a cosine-similar item already on DB.
    Done. But at the moment:
        - it is evaluated on the fly for all authors/books
        - the desired check-box in the edit form is handled in a very cumbersone way in the endpoint code
        * Should rewrite and largely streamline the whole edit/insert endpoint handling!
        * Should outsource the similar-* issue to a separate module
        * Should uniformize the edits and form-to-object, reqargs-to-form mechanics.

* deploy within a lighty or apache or nginx environment (fastCGI? gunicorn? flup? .htaccess?)

* in the two addreplace calls, when updating: the list of attributes must be cleverly handled instead of a lot of
    explicit member copies that are now being done.

* Some advanced stats in a dedicated subpage of 'index'
    E.g. book breakdown per genre
    E.g. percentage and number of books that are out
